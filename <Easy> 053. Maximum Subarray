/*
https://leetcode.com/problems/maximum-subarray/
53. Maximum Subarray

Given an integer array nums, find the contiguous subarray (containing at least one number) 
which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and
conquer approach, which is more subtle.
*/


class Solution {
    public int[] plusOne(int[] digits) {
        int[] ans = new int[digits.length];
        // List<Integer> ans = new ArrayList<>();
        int plusOne = 1;
        int allNine=0;
        
        for(int i = digits.length-1;i>=0;i--){

            ans[i] = (digits[i]+plusOne) % 10;
            if(digits[i]+plusOne >= 10){
                plusOne = 1;
            }else{
                plusOne =0;
            }
            if(digits[i]==9) allNine ++;
        }
        if(allNine ==digits.length){
            int[] newAns = new int[digits.length+1];
            newAns[0] = 1;
            return newAns;
        }
        
        return ans;
        


    }
}
