/*

118. Pascal's Triangle
Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it.

Example:

Input: 5
Output:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]
*/

class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> triangle = new ArrayList<>();
        if(numRows ==0) return triangle;
        
        List<Integer> firstRow = new ArrayList<>();
        firstRow.add(1);
        triangle.add(firstRow);
        
        for(int i = 1;i<numRows;i++){
            List<Integer> prevRow = new ArrayList<>();
            prevRow = triangle.get(i-1);
            List<Integer> newRow = new ArrayList<>();
            
            newRow.add(1);
            for(int j=1;j<i;j++){
            newRow.add(prevRow.get(j-1)+prevRow.get(j));
            }
            newRow.add(1);
            triangle.add(newRow);
           
        }
        return triangle;
        
    }
}
